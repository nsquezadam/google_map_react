{"version":3,"sources":["assets/compass.svg","components/Locate.js","components/SearchCoodinates.js","components/MapGoogle.js","App.js","index.js"],"names":["Locate","panTo","className","onClick","console","log","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","src","compass","alt","Geocode","setApiKey","process","SearchCoodinates","useState","setLatitude","setLongitude","parseFloat","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","libraries","center","options","disableDefaultUI","zoomControl","MapGoogle","props","markers","setMarkers","selected","setSelected","onMapClick","useCallback","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","setZoom","useLoadScript","googleMapsApiKey","isLoaded","loadError","mapContainerStyle","width","height","zoom","onLoad","marker","toISOString","onCloseClick","formatRelative","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c59e43f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/compass.de577570.svg\";","import React from 'react';\nimport \"../assets/styles.css\"\nimport compass from \"../assets/compass.svg\"\n\nconst Locate = ({panTo}) => {\n  \n  const handleClickCurrentPosition = () =>{\n    console.log('boton para volver a la misma posicion')\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        console.log(position.coords.latitude)\n      },\n   \n      () => null\n    )\n  }\n  \n  \n  return (\n    <>\n      <button\n      className=\"locate\"\n      onClick={handleClickCurrentPosition}>\n      <img src={compass} alt=\"compass\" />\n    </button>\n    </>\n  );\n}\n\nexport default Locate;\n","import React, { useState } from \"react\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport Geocode from \"react-geocode\";\n\n\nimport \"@reach/combobox/styles.css\";\nimport \"../assets/styles.css\";\n\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\nconst SearchCoodinates = ({ panTo }) => {\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n\n  // <Combobox onSelect={async(latLng)=>{\n  //   setValue(latLng, false);\n  //   clearSuggestions()\n  //   try {\n  //     const results = await getGeocode({latLng})\n  //     const {lat, lng} = await getLatLng(results[0])\n  //    panTo({lat, lng})\n  //    console.log(lat, lng)\n\n  //    } catch (error) {\n  //      console.log(\"mensaje error\",error)\n  //   }\n\n  // }}>\n  let lat = parseFloat(latitude);\n  let lng = parseFloat(longitude);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(latitude, longitude);\n    \n  };\n\n  // prueba browser 46.8071365,2.4060443\n  //-33.4769256,-70.6028153\n  const handleClickSearch = ()=> {\n       panTo({lat, lng})\n       \n  }\n\n  return (\n    <div className=\"searchCoordinate\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={latitude}\n          onChange={(e) => setLatitude(e.target.value)}\n          placeholder =\"Ingresa Latitud\"\n        />\n        <input\n          type=\"text\"\n          value={longitude}\n          onChange={(e) => setLongitude(e.target.value)}\n          placeholder =\"Ingresa Longitud\"        \n        />\n        <button type=\"submit\" onClick={handleClickSearch}>Buscar</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchCoodinates;\n","import React, {useState, useCallback, useRef } from 'react';\nimport { GoogleMap, \n        useLoadScript,\n         Marker,\n         InfoWindow \n        } from '@react-google-maps/api';\n\n//import mapStyles from '../mapStyle';\nimport {formatRelative} from 'date-fns'\n//import Search from './Search'\nimport Locate from './Locate';\nimport SearchCoodinates from './SearchCoodinates';\n\n\n\n\nconst libraries=[\"places\"]\n//-33.436884, -70.634395 \nconst center = {\n  lat: -33.436884, \n  lng: -70.634395 ,  \n}\nconsole.log(center)\nconst options = {\n  // styles: mapStyles,\n  disableDefaultUI:true,\n  zoomControl:true,\n}\n\n\nconst MapGoogle = (props) => {\n\n\n\n\nconst mapContainerStyle ={\n   \n  width: \"100vw\",\n  height: \"100vh\",\n} \n\n\n\n\n\n\n\n  const [showSearching, setShowSearching] = useState(false)\n  const [markers, setMarkers] = useState([])\n  const [selected, setSelected] = useState(null)\n\n  const onMapClick = useCallback((e)=>{\n    setMarkers(current =>[...current,{\n      lat:e.latLng.lat(),\n      lng:e.latLng.lng(),\n      time:new Date(),\n    }]) \n  }, [])\n\n\n  const mapRef = useRef();\n  const onMapLoad =  useCallback((map) => {\n      mapRef.current = map\n    },[])\n  const panTo = useCallback(({lat, lng}) => {\n    mapRef.current.panTo({lat, lng})\n    mapRef.current.setZoom(18)\n  },[])  \n\n  const {isLoaded, loadError } = useLoadScript({\n   \n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n    \n  })\n  if(loadError) return  \"Error loading Map\";\n  if(!isLoaded) return  \"Loading Map\";\n\n  \n  return (\n    <>\n\n  \n    <Locate panTo={panTo}/>\n   \n    {/* <Search panTo={panTo}/> */}\n    <SearchCoodinates panTo={panTo} />\n   \n    <GoogleMap \n    mapContainerStyle={mapContainerStyle}\n    zoom={10}\n    center={center}\n    options={options}\n    onClick={onMapClick}\n    onLoad={onMapLoad} >\n   \n      {markers.map((marker) => {\n        return(\n      <Marker \n      key={marker.time.toISOString()}\n      position={{\n        lat:marker.lat,\n        lng:marker.lng,\n      }}\n      onClick={()=> \n        setSelected(marker)}  \n      />)})}\n      {selected ? (<InfoWindow \n      position={{lat: selected.lat, lng: selected.lng}}\n      onCloseClick={()=>{\n        setSelected(null);\n      }} >\n        <div>\n          <h2>Info</h2>\n          <p>Fecha {formatRelative(selected.time, new Date())}</p>\n        </div>\n      </InfoWindow>) : null}\n    </GoogleMap>\n    </>\n  );\n}\n\n \n\nexport default MapGoogle;\n","import React from 'react';\nimport MapGoogle from './components/MapGoogle'\n// import styled from 'styled-components';\n\n\n\n\nconst App = () => {\n\n\n\n\n\n  return (\n   <>\n    <MapGoogle/>\n   </>\n  );\n}\n\n\n\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}