{"version":3,"sources":["assets/compass.svg","components/Locate.js","components/SearchCoodinates.js","assets/redMarked.svg","assets/yelowMarked.svg","components/MapGoogle.js","App.js","index.js"],"names":["Locate","props","className","onClick","clickMyPosition","src","compass","alt","SearchCoodinates","panTo","markTo","useState","latitude","setLatitude","longitude","setLongitude","console","log","lat","parseFloat","lng","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","libraries","center","options","disableDefaultUI","zoomControl","MapGoogle","selected","setSelected","markedCurrentPosition","SetMarkedCurrentPosition","searchedLocationMarker","setSearchedLocationMarker","mapRef","useRef","onMapLoad","useCallback","map","current","setZoom","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","position","navigator","geolocation","getCurrentPosition","coords","mapContainerStyle","width","height","zoom","onLoad","icon","url","redMarked","origin","window","google","maps","Point","anchor","scaledSize","Size","yelowMarked","onCloseClick","formatRelative","time","Date","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.800c7eb2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/compass.de577570.svg\";","import React from 'react';\nimport \"../assets/styles.css\"\nimport compass from \"../assets/compass.svg\"\n\nconst Locate = (props) => {\n  \n \n  \n  return (\n    <>\n      <button\n      className=\"locate\"\n      onClick={props.clickMyPosition}>\n      <img src={compass} alt=\"compass\" />\n    </button>\n    </>\n  );\n}\n\nexport default Locate;\n","import React, { useState } from \"react\";\nimport \"@reach/combobox/styles.css\";\nimport \"../assets/styles.css\";\n\n\nconst SearchCoodinates = ({panTo, markTo}) => {\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n\n \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('info del submit',latitude, longitude)\n    \n   \n  };\n  \nconsole.log('info traida', latitude, longitude)\nlet lat = parseFloat(latitude);\nlet lng = parseFloat(longitude);\nconst handleClickSearch = ()=> {\n    panTo({lat, lng})\n    markTo({lat, lng})\n    setLatitude(\"\")\n    setLongitude(\"\")\n}  \n\n  \n\n  return (\n    <div className=\"searchCoordinate\" >\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={latitude}\n          onChange={(e) => {\n            setLatitude(e.target.value) \n            console.log(e.target.value)}}\n          placeholder =\"Ingresa Latitud\"\n        />\n        <input\n          type=\"text\"\n          value={longitude}\n          onChange={(e) => setLongitude(e.target.value)}\n          placeholder =\"Ingresa Longitud\"        \n        />\n        <button type=\"submit\" onClick={handleClickSearch}  >Buscar</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchCoodinates;\n","export default __webpack_public_path__ + \"static/media/redMarked.9f558e2d.svg\";","export default __webpack_public_path__ + \"static/media/yelowMarked.07876ef4.svg\";","import React, { useState, useCallback, useRef } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\n\nimport { formatRelative } from \"date-fns\";\n\nimport Locate from \"./Locate\";\nimport SearchCoodinates from \"./SearchCoodinates\";\n// import greenMarked from \"../assets/greenMarked.svg\";\nimport redMarked from \"../assets/redMarked.svg\";\nimport yelowMarked from \"../assets/yelowMarked.svg\";\n\nconst libraries = [\"places\"];\n\nconst center = {\n  lat: -33.436884,\n  lng: -70.634395,\n};\nconsole.log(center);\nconst options = {\n  // styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nconst MapGoogle = ({ latitude, longitude }) => {\n  const mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n  // only if you want to mark points on the map \n  //const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [markedCurrentPosition, SetMarkedCurrentPosition] = useState({\n    lat: \"\",\n    lng: \"\",\n  });\n  const [searchedLocationMarker, setSearchedLocationMarker] = useState({\n    lat: \"\",\n    lng: \"\",\n  });\n\n  // only if you want to mark points on the map function\n  // const onMapClick = useCallback((e) => {\n  //   setMarkers((current) => [\n  //     ...current,\n  //     {\n  //       lat: e.latLng.lat(),\n  //       lng: e.latLng.lng(),\n  //       time: new Date(),\n  //     },\n  //   ]);\n  // }, []);\n\n  const mapRef = useRef();\n  const onMapLoad = useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(18);\n  }, []);\n\n  const markTo = useCallback(({ lat, lng }) => {\n    setSearchedLocationMarker({\n      lat: lat,\n      lng: lng,\n    });\n  }, []);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n  if (loadError) return \"Error loading Map\";\n  if (!isLoaded) return \"Loading Map\";\n\n  const handleClickCurrentPosition = () => {\n    console.log(\"boton para volver a la misma posicion\");\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          panTo({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n          console.log(position.coords.latitude, position.coords.longitude);\n          SetMarkedCurrentPosition({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n        },\n\n        () => null\n      );\n    } else {\n      console.log(\"no soporta geolocalizacion\");\n    }\n  };\n\n  const position = {\n    lat: markedCurrentPosition.lat,\n    lng: markedCurrentPosition.lng,\n  };\n\n  return (\n    <>\n      <Locate clickMyPosition={handleClickCurrentPosition} />\n\n      {/* <Search panTo={panTo}/> */}\n      <SearchCoodinates panTo={panTo} markTo={markTo} />\n\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={10}\n        center={center}\n        options={options}\n        //only if you want to mark points on the map\n        // onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        <Marker\n          position={position}\n          onClick={() => {\n            setSelected(markedCurrentPosition);\n          }}\n          icon={{\n            url: `${redMarked}`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30),\n          }}\n        />\n        <Marker\n          position={{\n            lat: searchedLocationMarker.lat,\n            lng: searchedLocationMarker.lng,\n          }}\n          onClick={() => {\n            setSelected(searchedLocationMarker);\n          }}\n          icon={{\n            url: `${yelowMarked}`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30),\n          }}\n        />\n        {/* only if you want to mark points on the map */}\n        {/* {markers.map((marker) => {\n          return (\n            <Marker\n              onLoad={(marker) => {\n                console.log(\"marker: \", marker);\n              }}\n              key={marker.time.toISOString()}\n              position={{\n                lat: marker.lat,\n                lng: marker.lng,\n              }}\n              onClick={() => setSelected(marker)}\n              icon={{\n                url: `${greenMarked}`,\n                origin: new window.google.maps.Point(0, 0),\n                anchor: new window.google.maps.Point(15, 15),\n                scaledSize: new window.google.maps.Size(40, 40),\n              }}\n            />\n          );\n        })} */}\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>Info</h2>\n              <p>Fecha {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </>\n  );\n};\n\nexport default MapGoogle;\n","import React from 'react';\nimport MapGoogle from './components/MapGoogle'\n// import styled from 'styled-components';\n\n\n\n\nconst App = () => {\n\n\n\n\n\n  return (\n   <>\n    <MapGoogle/>\n   </>\n  );\n}\n\n\n\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}